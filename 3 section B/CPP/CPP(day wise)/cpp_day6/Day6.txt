
"is a" Hierarchy(inheritance) 
-Process of acquiring properties and behaviour of base class by the derived class is called inheritance.
-Without changing implementation of existing class, if we want to extends meaning of the class then we should use inheritance.






//example of inheritance










types of inheritance
1. single - one derived class inherits from only one base class.
2. multiple - a single derived class may inherit from two or more than two base classes.
3. hierarchical - multiple derived classes inherits from a single base class.
4. multilevel -  the derived class inherits from a class, which in turn inherits from some other class.


5.hybrid-combination of any two above types.











Inheritance= journey from Generalization to Specialization.























protected data member:
 The protected access specifier allows the base class members to access onto derived class. However, protected members are not accessible from outside the class and globle functions like main().














Mode of inheritance  (read "--->" as becomes)
		Base	   Derived
public mode:
		Public ---> Public
		protected ---> Protected
		private --->  -- 

protected mode:
		Public ---> Protected
		protected ---> Protected
		private ---> -- 

private mode:
		Public ---> private 
		protected ---> private
		private ---> -- 








#include<iostream>
using namespace std;

class BASE
{
	private:
		int PrivateData;
	protected:
		int ProtectedData;
	public:
		int PublicData;
};

class Derived:public BASE
{
	void printDate()
	{
		this->PrivateData=1;
		this->ProtectedData=1;
		this->PublicData=1;
	}

};
class DerivedDerived:public Derived
{
public :
	void DerivedDerivedPrint()
	{
		this->PrivateData=1;
		this->ProtectedData=1;
		this->PublicData=1;
	}
};
class other
{
	void OtherPrint()
	{
		Derived d;
		d.PrivateData=1;
		d.ProtectedData=1;
		d.PublicData=1;
	}
}
int main()
{
}






Virtual Inheritance-
Virtual inheritance is a C++ technique that ensures only one copy of a base class's member variables are inherited by grandchild derived classes. This feature is most useful for multiple inheritance to avoid the diamond problem 



















object slicing-if we assign derived class object to the base class object then compiler copies only state of base class portion from derived class object into base class object . This process is called object slicing.














//person - student example
//object slicing on stack based objs
//object slicing on heap based objs
//virtual function




Virtual Function
-> The function which gets called depending upon the type of 
object rather than type of pointer such type of function is 
called as "Virtual Function"
















Late Binding
-> when call to the Virtual Function is given by poiner then 
it is late binding.

Function overridding:
-> virtual function defined in base class is once again 
redefine in derived class is called Function overridding
->Function which takes part in overridding is called  as 
overridded function
->for function overriedding function in the base class must
be virtual.





Virtual function table:
when class contains at least one virtual function at that time 
compiler create one table internally which stores the address 
of virtual function declared inside that class such table is called 
as virtual function table VF-table or v-table.




Virtual function pointer :
when class contains virtual function internaly v-table is created 
by compiler implicitly adds one hidden member inside class 
which store the address of v-table such hidden member is called as
virtual function pointer vfptr/vptr






 

 
